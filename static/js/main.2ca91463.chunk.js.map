{"version":3,"sources":["features/appSlice.js","components/SidebarChannel.js","features/userSlice.js","firebase.js","components/Sidebar.js","components/ChatHeader.js","components/Message.js","components/Chat.js","components/Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","prompt","add","key","fontSize","Avatar","signOut","src","photo","displayName","uid","substring","ChatHeader","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","messagesEnd","useRef","scrollToBottom","current","scrollIntoView","behavior","orderBy","ref","value","disabled","onChange","e","target","preventDefault","FieldValue","serverTimestamp","type","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ca91463.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from \"react\";\r\nimport \"./css/SidebarChannel.css\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setChannelInfo } from \"../features/appSlice\";\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div\r\n      className=\"sidebarChannel\"\r\n      onClick={() =>\r\n        dispatch(\r\n          setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName,\r\n          })\r\n        )\r\n      }\r\n    >\r\n      <h4>\r\n        <span className=\"sidebarChannel__hash\">#</span>\r\n        {channelName}\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChannel;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCWQK95Rxg99Xvm2_p7kLk5OAyXZAnFUGk\",\r\n  authDomain: \"https://www.niteshseram.me\",\r\n  databaseURL: \"https://discord-clone-c51ae.firebaseio.com\",\r\n  projectId: \"discord-clone-c51ae\",\r\n  storageBucket: \"discord-clone-c51ae.appspot.com\",\r\n  messagingSenderId: \"615907649203\",\r\n  appId: \"1:615907649203:web:7e06fe98f14dc508ca72c6\",\r\n  measurementId: \"G-GKSWXEZZF8\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SidebarChannel from \"./SidebarChannel\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport CallIcon from \"@material-ui/icons/Call\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./../features/userSlice\";\r\nimport db, { auth } from \"../firebase\";\r\nimport \"./css/Sidebar.css\";\r\n\r\nfunction Sidebar() {\r\n  const user = useSelector(selectUser);\r\n  const [channels, setChannels] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"channels\").onSnapshot((snapshot) => {\r\n      setChannels(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          channel: doc.data(),\r\n        }))\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  const handleAddChannel = () => {\r\n    const channelName = prompt(\"Enter a new channel name\");\r\n    if (channelName) {\r\n      db.collection(\"channels\").add({\r\n        channelName: channelName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__top\">\r\n        <h3>Nitesh Seram</h3>\r\n        <ExpandMoreIcon />\r\n      </div>\r\n\r\n      <div className=\"sidebar__channels\">\r\n        <div className=\"sidebar__channelsHeader\">\r\n          <div className=\"sidebar__header\">\r\n            <ExpandMoreIcon />\r\n            <h4>Text Channels</h4>\r\n          </div>\r\n          <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n        </div>\r\n        <div className=\"sidebar__channelsList\">\r\n          {channels.map(({ id, channel }) => (\r\n            <SidebarChannel\r\n              key={id}\r\n              id={id}\r\n              channelName={channel.channelName}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__voice\">\r\n        <SignalCellularAltIcon\r\n          className=\"sidebar__voiceIcon\"\r\n          fontSize=\"large\"\r\n        />\r\n        <div className=\"sidebar__voiceInfo\">\r\n          <h3>Voice Connected</h3>\r\n          <p>Stream</p>\r\n        </div>\r\n\r\n        <div className=\"sidebar__voiceIcons\">\r\n          <InfoOutlinedIcon />\r\n          <CallIcon />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__profile\">\r\n        <Avatar onClick={() => auth.signOut()} src={user.photo} />\r\n        <div className=\"sidebar__profileInfo\">\r\n          <h3>{user.displayName}</h3>\r\n          <p>#{user.uid.substring(0, 5)}</p>\r\n        </div>\r\n\r\n        <div className=\"sidebar__profileIcons\">\r\n          <MicIcon />\r\n          <HeadsetIcon />\r\n          <SettingsIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\r\nimport PeopleAltRoundedIcon from \"@material-ui/icons/PeopleAltRounded\";\r\nimport SearchRoundedIcon from \"@material-ui/icons/SearchRounded\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport HelpRoundedIcon from \"@material-ui/icons/HelpRounded\";\r\nimport \"./css/ChatHeader.css\";\r\n\r\nfunction ChatHeader({ channelName }) {\r\n  return (\r\n    <div className=\"chatHeader\">\r\n      <div className=\"chatHeader__left\">\r\n        <h3>\r\n          <span className=\"chatHeader__hash\">#</span>\r\n          {channelName}\r\n        </h3>\r\n      </div>\r\n      <div className=\"chatHeader__right\">\r\n        <NotificationsIcon />\r\n        <EditLocationRoundedIcon />\r\n        <PeopleAltRoundedIcon />\r\n        <div className=\"chatHeader__search\">\r\n          <input placeholder=\"Search\" />\r\n          <SearchRoundedIcon />\r\n        </div>\r\n        <SendRoundedIcon />\r\n        <HelpRoundedIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatHeader;\r\n","import React from \"react\";\r\nimport \"./css/Message.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\n\r\nfunction Message({ timestamp, message, user }) {\r\n  return (\r\n    <div className=\"message\">\r\n      <Avatar src={user.photo} />\r\n      <div className=\"message__info\">\r\n        <h4>\r\n          {user.displayName}\r\n          <span className=\"message__timestamp\">\r\n            {new Date(timestamp?.toDate()).toUTCString()}\r\n          </span>\r\n        </h4>\r\n        <p>{message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport GifIcon from \"@material-ui/icons/Gif\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport Message from \"./Message\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectChannelId, selectChannelName } from \"./../features/appSlice\";\r\nimport { selectUser } from \"./../features/userSlice\";\r\nimport db from \"./../firebase\";\r\nimport firebase from \"firebase\";\r\nimport \"./css/Chat.css\";\r\n\r\nfunction Chat() {\r\n  const user = useSelector(selectUser);\r\n  const channelId = useSelector(selectChannelId);\r\n  const channelName = useSelector(selectChannelName);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const messagesEnd = useRef();\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEnd.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection(\"channels\")\r\n        .doc(channelId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) => {\r\n          setMessages(snapshot.docs.map((doc) => doc.data()));\r\n        });\r\n    }\r\n    scrollToBottom();\r\n  }, [channelId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\r\n      message: input,\r\n      user: user,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n\r\n    setInput(\"\");\r\n    scrollToBottom();\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <ChatHeader channelName={channelName} />\r\n      <div className=\"chat__messages\">\r\n        {messages.map((message) => (\r\n          <Message\r\n            timestamp={message.timestamp}\r\n            message={message.message}\r\n            user={message.user}\r\n          />\r\n        ))}\r\n        <div ref={messagesEnd} />\r\n      </div>\r\n      <div className=\"chat__input\">\r\n        <AddCircleIcon fontSize=\"large\" />\r\n        <form>\r\n          <input\r\n            value={input}\r\n            disabled={!channelId}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder={`Message ${channelName}`}\r\n          />\r\n          <button\r\n            onClick={sendMessage}\r\n            className=\"chat__inputButton\"\r\n            type=\"submit\"\r\n          >\r\n            Send Message\r\n          </button>\r\n        </form>\r\n\r\n        <div className=\"chat__inputIcons\">\r\n          <CardGiftcardIcon />\r\n          <GifIcon />\r\n          <EmojiEmotionsIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"../firebase\";\r\nimport \"./css/Login.css\";\r\n\r\nfunction Login() {\r\n  const signIn = (e) => {\r\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__logo\">\r\n        <img\r\n          src=\"https://upload.wikimedia.org/wikipedia/sco/9/98/Discord_logo.svg\"\r\n          alt=\"logo\"\r\n        />\r\n      </div>\r\n      <Button onClick={signIn}>Sign In</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Chat from \"./components/Chat\";\r\nimport Login from \"./components/Login\";\r\nimport { auth } from \"./firebase\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport { login, logout } from \"./features/userSlice\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) : (\r\n        <Login />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\nimport appReducer from \"../features/appSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}